Exemple 1 : Commandes de base avec plusieurs pipes
Commande Shell :
cat infile | grep "motif" | sort | uniq > outfile
Utilisation avec votre programme Pipex :
./pipex_bonus infile.txt "cat" "grep motif" "sort" "uniq" outfile.txt
Explication :
cat lit le contenu de infile.txt.
grep motif filtre les lignes contenant le mot "motif".
sort trie les lignes filtrées.
uniq supprime les lignes dupliquées.
Le résultat est écrit dans outfile.txt.

Exemple 2 : Conversion de texte avec plusieurs pipes
Commande Shell :
cat infile.txt | tr '[:lower:]' '[:upper:]' | rev | awk '{print NR ": " $0}' > outfile.txt
Utilisation avec votre programme Pipex :
./pipex_bonus infile.txt "cat" "tr '[:lower:]' '[:upper:]'" "rev" "awk '{print NR \": \" \$0}'" outfile.txt
Explication :
cat lit le contenu de infile.txt.
tr '[:lower:]' '[:upper:]' convertit les lettres minuscules en majuscules.
rev inverse chaque ligne.
awk '{print NR ": " $0}' ajoute le numéro de ligne au début de chaque ligne.
Le résultat est écrit dans outfile.txt.

Exemple 3 : Calcul de la somme des nombres
Commande Shell :
seq 1 100 | paste -sd+ - | bc > outfile.txt
Utilisation avec votre programme Pipex :
Sur macOS, la commande seq peut ne pas être disponible par défaut. Vous pouvez utiliser jot à la place.
./pipex_bonus infile.txt "jot 100" "paste -sd+ -" "bc" outfile.txt
Explication :
jot 100 génère une séquence de nombres de 1 à 100.
paste -sd+ - combine tous les nombres en une seule ligne, séparés par des +.
bc calcule la somme des nombres.
Le résultat est écrit dans outfile.txt.


Exemple 4 : Affichage des processus en cours
Commande Shell :
ps aux | grep bash | wc -l > outfile.txt
Utilisation avec votre programme Pipex :
./pipex_bonus infile.txt "ps aux" "grep bash" "wc -l" outfile.txt
Explication :
ps aux affiche tous les processus en cours.
grep bash filtre les processus liés à bash.
wc -l compte le nombre de lignes (processus trouvés).
Le résultat est écrit dans outfile.txt.


Exemple 5 : Traitement de texte avancé
Commande Shell :
cat infile.txt | sed 's/[aeiou]/_/g' | sort | uniq -c | sort -nr > outfile.txt
Utilisation avec votre programme Pipex :
./pipex_bonus infile.txt "cat" "sed 's/[aeiou]/_/g'" "sort" "uniq -c" "sort -nr" outfile.txt
Explication :
cat lit le contenu de infile.txt.
sed 's/[aeiou]/_/g' remplace les voyelles par des underscores.
sort trie les lignes.
uniq -c compte le nombre d'occurrences de chaque ligne unique.
sort -nr trie les lignes par ordre numérique décroissant.
Le résultat est écrit dans outfile.txt.

Exemple 6 : Afficher les 5 plus grands nombres
Commande Shell :
cat numbers.txt | sort -nr | head -5 > largest_numbers.txt
Utilisation avec votre programme Pipex :
./pipex_bonus numbers.txt "cat" "sort -nr" "head -5" largest_numbers.txt
Explication :
cat lit le contenu de numbers.txt.
sort -nr trie les nombres en ordre numérique décroissant.
head -5 sélectionne les 5 premiers nombres.
Le résultat est écrit dans largest_numbers.txt.

Exemple 7 : Inverser l'ordre des lignes (équivalent de tac)
Sur macOS, la commande tac n'est pas disponible. Vous pouvez utiliser tail -r pour inverser l'ordre des lignes.
Commande Shell :
cat infile.txt | tail -r > outfile.txt
Utilisation avec votre programme Pipex :
./pipex_bonus infile.txt "cat" "tail -r" outfile.txt
Explication :
cat lit le contenu de infile.txt.
tail -r inverse l'ordre des lignes.
Le résultat est écrit dans outfile.txt.



Exemple 8 : Compter les mots uniques
Commande Shell :
cat infile.txt | tr '[:space:]' '\n' | grep -v '^$' | sort | uniq -c | sort -nr > outfile.txt
Utilisation avec votre programme Pipex :
./pipex_bonus infile.txt "cat" "tr '[:space:]' '\n'" "grep -v '^$'" "sort" "uniq -c" "sort -nr" outfile.txt
Explication :
cat lit le contenu de infile.txt.
tr '[:space:]' '\n' remplace les espaces par des sauts de ligne pour avoir un mot par ligne.
grep -v '^$' supprime les lignes vides.
sort trie les mots.
uniq -c compte les occurrences de chaque mot unique.
sort -nr trie les mots par fréquence décroissante.
Le résultat est écrit dans outfile.txt.

Exemple 9 : Filtrer les lignes contenant un motif spécifique
Commande Shell :
grep -i "erreur" syslog.log | cut -d' ' -f1-3 | sort | uniq > errors.txt
Utilisation avec votre programme Pipex :
./pipex_bonus syslog.log "grep -i 'erreur'" "cut -d' ' -f1-3" "sort" "uniq" errors.txt
Explication :
grep -i 'erreur' filtre les lignes contenant "erreur" sans tenir compte de la casse.
cut -d' ' -f1-3 extrait les trois premiers champs (par exemple, la date et l'heure).
sort trie les lignes.
uniq supprime les doublons.
Le résultat est écrit dans errors.txt.

Exemple 10 : Trouver les fichiers les plus volumineux
Commande Shell :
ls -l /path/to/directory | sort -k5 -nr | head -5 > largest_files.txt
Utilisation avec votre programme Pipex :
./pipex_bonus infile.txt "ls -l /path/to/directory" "sort -k5 -nr" "head -5" largest_files.txt
Explication :
ls -l /path/to/directory liste les fichiers avec des détails dans le répertoire spécifié.
sort -k5 -nr trie les fichiers par taille (5e colonne) en ordre décroissant.
head -5 affiche les 5 premiers fichiers les plus volumineux.
Le résultat est écrit dans largest_files.txt.

